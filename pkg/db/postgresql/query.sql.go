// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name
`

type CreateEventParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.ID, arg.Name)
	var i Event
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name FROM event
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name FROM event
ORDER BY name
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
